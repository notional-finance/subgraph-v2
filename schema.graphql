type Proposal @entity {
  "Proposal's unique identifier"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
  createdAt: Int!
  proposer: Delegate!
  votes: [Vote!]!
  history: [ProposalState!]
  targets: [Bytes!]!
  values: [BigInt!]!
  calldatas: [Bytes!]!
  startBlock: Int!
  endBlock: Int!
  isCancelled: Boolean
  isQueued: Boolean
  isExecuted: Boolean
}

type Vote @entity {
  "Address and proposal combined as the unique identifier"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
  proposal: Proposal!
  delegate: Delegate!
  yesToProposal: Boolean!
  votingPower: BigInt!
}

type Delegate @entity {
  "Ethereum address"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  sNOTEVotingPower: BigInt!
  NOTEVotingPower: BigInt!
  totalVotingPower: BigInt!
  account: Account!

  delegatedNote: [NoteBalance!] @derivedFrom(field: "delegate")
  delegatedStakedNote: [StakedNoteBalance!] @derivedFrom(field: "delegate")
  votingPowerChange: [VotingPowerChange!] @derivedFrom(field: "delegate")
  votes: [Vote!] @derivedFrom(field: "delegate")
  proposals: [Proposal!] @derivedFrom(field: "proposer")
}

enum VotingPowerSource {
  sNOTE,
  NOTE
}

type VotingPowerChange @entity {
  "TokenAddress:TxnHash:LogIndex"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!

  source: VotingPowerSource!
  delegate: Delegate!
  votingPowerBefore: BigInt!
  votingPowerAfter: BigInt!
}

type ProposalState @entity {
  id: ID!
  state: ProposalStateEnum!
  transactionHash: Bytes!
  lastUpdateTimestamp: Int!
}

enum TokenType {
  "Token that is the base for a cToken or other mintable token"
  UnderlyingToken
  "Compound interest bearing token"
  cToken
  "Ether specific Compound interest bearing token"
  cETH
  "The one and only Ether"
  Ether
  "A token that cannot be minted as a cToken, but can be used as collateral or traded"
  NonMintable
}

enum ProposalStateEnum {
  PENDING
  CANCELLED
  QUEUED
  EXECUTED
}

type Currency @entity {
  "Auto incrementing unique numeric id"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Category of token that this refers to"
  tokenType: TokenType!

  "Name of the asset currency"
  name: String!
  "Symbol of the asset currency"
  symbol: String!
  "Address of asset token"
  tokenAddress: Bytes!
  "Decimals of the asset token"
  decimals: BigInt!
  "If asset token has a transfer fee"
  hasTransferFee: Boolean!
  "Maximum total contract balance for collateral, zero if no limit"
  maxCollateralBalance: BigInt

  "Name of the underlying currency"
  underlyingName: String
  "Symbol of the underlying currency"
  underlyingSymbol: String
  "Address of underlying token"
  underlyingTokenAddress: Bytes
  "Decimals of the underlying token"
  underlyingDecimals: BigInt
  "If underlying token has a transfer fee"
  underlyingHasTransferFee: Boolean

  "Exchange rate from this currency to Eth, used in free collateral calculations"
  ethExchangeRate: EthExchangeRate! @derivedFrom(field: "baseCurrency")
  "Exchange rate from this currency to the underlying asset"
  assetExchangeRate: AssetExchangeRate @derivedFrom(field: "assetCurrency")
  "Cash group for a currency, if exists"
  cashGroup: CashGroup @derivedFrom(field: "currency")
  "nToken for a currency, if exists"
  nToken: nToken @derivedFrom(field: "currency")
  "Incentive Migration for a currency, if exists"
  incentiveMigration: IncentiveMigration @derivedFrom(field: "currency")

  "Hourly data for this currency"
  ethExchangeRateHistoricalData: [EthExchangeRateHistoricalData!] @derivedFrom(field: "currency")
  assetExchangeRateHistoricalData: [AssetExchangeRateHistoricalData!] @derivedFrom(field: "currency")
  nTokenPresentValueHistoricalData: [NTokenPresentValueHistoricalData!] @derivedFrom(field: "currency")

  "Strategy vaults that use this currency as a primary borrow"
  strategyVaults: [StrategyVault!] @derivedFrom(field: "primaryBorrowCurrency")
}

type EthExchangeRate @entity {
  "Currency id that this exchange rate refers to"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Base currency in the exchange rate"
  baseCurrency: Currency!
  "Rate oracle that is used to reference the exchange rate"
  rateOracle: Bytes!
  "Decimal places of the exchange rate"
  rateDecimalPlaces: Int!
  "Does the exchange rate need to invert"
  mustInvert: Boolean!
  "Percentage buffer used when calculating free collateral for debt balances"
  buffer: Int!
  "Percentage haircut used when calculating free collateral for collateral balances"
  haircut: Int!
  "Exchange rate discount given when liquidating this currency"
  liquidationDiscount: Int!
}

type AssetExchangeRate @entity {
  "Currency id that this asset rate refers to"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Asset currency in the exchange rate"
  assetCurrency: Currency!
  "Asset rate adapter interface to the asset token"
  rateAdapterAddress: Bytes!
  "Decimal places of the underlying token to the asset token"
  underlyingDecimalPlaces: Int!

  "Asset rates that fCash assets will settle at for given maturities"
  settlementRates: [SettlementRate!] @derivedFrom(field: "assetExchangeRate")
}

type SettlementRate @entity {
  "Currency id and maturity that this settlement rate refers to"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Currency of this settlement rate"
  currency: Currency!
  "Asset exchange rate referenced by this settlement rate"
  assetExchangeRate: AssetExchangeRate!
  "Maturity that this settlement rate refers to"
  maturity: Int!
  "Settlement rate value"
  rate: BigInt!
}

type CashGroup @entity {
  "Currency id that this cash group refers to"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Currency of this cash group"
  currency: Currency!
  "Index of the AMMs on chain that will be made available."
  maxMarketIndex: Int!
  "Maximum length of a market maturity in seconds"
  maxMarketMaturityLengthSeconds: Int!

  "Time window in minutes that the rate oracle will be averaged over"
  rateOracleTimeWindowSeconds: Int!
  "Total fees per trade, specified in basis points"
  totalFeeBasisPoints: Int!
  "Share of the fees given to the protocol, denominated in percentage"
  reserveFeeSharePercent: Int!
  "Debt buffer specified in basis points"
  debtBufferBasisPoints: Int!
  "fCash haircut specified in basis points"
  fCashHaircutBasisPoints: Int!
  "Penalty for settling a negative cash debt in basis points"
  settlementPenaltyRateBasisPoints: Int!
  "Discount on fCash given to the liquidator in basis points"
  liquidationfCashHaircutBasisPoints: Int!
  "Discount on negative fCash given to the liquidator in basis points"
  liquidationDebtBufferBasisPoints: Int!

  "Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100"
  liquidityTokenHaircutsPercent: [Int!]!
  "Rate scalar used to determine the slippage of the market"
  rateScalars: [Int!]!

  "Current size of reserves accumulated for this cash group"
  reserveBalance: BigInt!
  "The minimum threshold of the reserve before they are harvested for buybacks"
  reserveBuffer: BigInt

  nToken: nToken! @derivedFrom(field: "cashGroup")
}

type nToken @entity {
  "Currency id of the nToken"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Address of the nToken"
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
  integralTotalSupply: BigInt!
  accumulatedNOTEPerNToken: BigInt
  lastSupplyChangeTime: BigInt!

  "Cash group that governs this nToken"
  cashGroup: CashGroup!
  "Currency of this nToken"
  currency: Currency!

  "Proportion of deposits that go into each corresponding market"
  depositShares: [Int!]
  "Maximum market proportion that the nToken will provide liquidity at"
  leverageThresholds: [Int!]
  "Annualized anchor rates used during market initialization"
  annualizedAnchorRates: [Int!]
  "Market proportions used during market initialization"
  proportions: [Int!]

  "Annual incentive emission rate"
  incentiveEmissionRate: BigInt

  "Residual purchase incentive in basis points"
  residualPurchaseIncentiveBasisPoints: Int
  "Seconds until residuals become available to purchase after market initialization"
  residualPurchaseTimeBufferSeconds: Int
  "Basis points of cash withholding for negative fCash"
  cashWithholdingBufferBasisPoints: Int
  "Percentage of the nToken PV that is used during free collateral"
  pvHaircutPercentage: Int
  "Discount on nToken PV given to liquidators"
  liquidationHaircutPercentage: Int

  "Link to the nToken account object"
  account: Account @derivedFrom(field: "nToken")
}

type GlobalTransferOperator @entity {
  "Address of the global transfer operator"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
}

type AuthorizedCallbackContract @entity {
  "Address of the callback contract"
  id: ID!
  name: String!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
}

type SecondaryIncentiveRewarder @entity {
  "Address of the rewarder contract"
  id: ID!
  currency: Currency!
  nToken: nToken!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
}

enum AssetType {
  fCash
  LiquidityToken_3Month
  LiquidityToken_6Month
  LiquidityToken_1Year
  LiquidityToken_2Year
  LiquidityToken_5Year
  LiquidityToken_10Year
  LiquidityToken_20Year
}

type Account @entity {
  "Account address"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Timestamp of the next time that the account will require settlement"
  nextSettleTime: BigInt!
  "True if the account's portfolio has debt assets"
  hasPortfolioAssetDebt: Boolean!
  "True if the account's cash balances have debt, may be temporarily inconsistent after a SettleCashEvent"
  hasCashDebt: Boolean!

  "Currency id of an asset bitmap, if set"
  assetBitmapCurrency: Currency
  "Account's balances of both cash and nTokens"
  balances: [Balance!]!
  "Account's portfolio assets"
  portfolio: [Asset!]!

  "A link to the nToken object if this is an nToken"
  nToken: nToken

  tradeHistory: [Trade!] @derivedFrom(field: "account")
  balanceChanges: [BalanceChange!] @derivedFrom(field: "account")
  assetChanges: [AssetChange!] @derivedFrom(field: "account")
  nTokenChanges: [nTokenChange!] @derivedFrom(field: "account")
  strategyVaults: [StrategyVaultAccount!] @derivedFrom(field: "account")

  stakedNoteBalance: StakedNoteBalance @derivedFrom(field: "account")
  stakedNoteChanges: [StakedNoteChange!] @derivedFrom(field: "account")
}

type Balance @entity {
  "Account Address:Currency ID combination"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Reference to currency that this balance represents"
  currency: Currency!

  "Cash balance denominated in asset cash terms"
  assetCashBalance: BigInt!
  "nToken balance of this currency"
  nTokenBalance: BigInt!
  "Last time token incentives were claimed on this balance"
  lastClaimTime: Int!
  "Last stored integral total supply amount, used to calculate incentives in the original method"
  lastClaimIntegralSupply: BigInt
  "Accumulator for incentive calculation"
  accountIncentiveDebt: BigInt
  "True if the account has migrated to the new incentive scheme"
  didMigrateIncentives: Boolean
}

type Asset @entity {
  "Account:CurrencyId:AssetType:Maturity"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Reference to currency that this balance represents"
  currency: Currency!
  "Timestamp when fCash matures, if liquidity token this will still refer to fCash maturity date"
  maturity: BigInt!
  "Date when assets will be settled, quarterly for liquidity tokens and at maturity for fCash"
  settlementDate: BigInt!
  "Asset type"
  assetType: AssetType!
  "Notional amount"
  notional: BigInt!
}

type Market @entity {
  "Currency Id:Settlement Date:Maturity combination"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  "Currency of this market"
  currency: Currency!
  "Date that fCash from this market will mature"
  maturity: Int!
  "Date that this market will settle"
  settlementDate: Int!
  "Market index"
  marketIndex: Int!
  "Length of market maturity in seconds"
  marketMaturityLengthSeconds: Int!

  "Total fCash available in the market"
  totalfCash: BigInt!
  "Total asset cash available in the market"
  totalAssetCash: BigInt!
  "Total liquidity tokens available in the market"
  totalLiquidity: BigInt!
  "Last annualized interest rate the market traded at"
  lastImpliedRate: Int!
  "Oracle rate for the market, must be averaged in using previousTradeTime"
  oracleRate: Int!
  "Last time when a trade occurred on the market"
  previousTradeTime: Int!

  historicalData: [MarketHistoricalData!] @derivedFrom(field: "market")
}

type MarketHistoricalData @entity {
  "MarketID:Hourly ID for this particular market"
  id: ID!
  market: Market!

  "Total fCash available in the market"
  totalfCash: BigInt!
  "Total asset cash available in the market"
  totalAssetCash: BigInt!
  "Total liquidity tokens available in the market"
  totalLiquidity: BigInt!
  "Last annualized interest rate the market traded at"
  lastImpliedRate: Int!
  "Oracle rate for the market, must be averaged in using previousTradeTime"
  oracleRate: Int!
  "Last time when a trade occurred on the market"
  previousTradeTime: Int!
}

type MarketInitialization @entity {
  "Currency ID:time reference timestamp"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  "Currency of markets"
  currency: Currency!
  "Markets that were initialized during this event"
  markets: [Market!]!
}

enum TradeType {
  Lend
  Borrow
  AddLiquidity
  RemoveLiquidity
  PurchaseNTokenResidual
  SettleCashDebt
  Transfer
}

type Trade @entity {
  "Currency ID:Account:Transaction hash:logIndex:batchIndex"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  account: Account!
  currency: Currency!
  market: Market

  tradeType: TradeType!
  maturity: BigInt!
  netAssetCash: BigInt!
  netUnderlyingCash: BigInt!
  netfCash: BigInt!
  netLiquidityTokens: BigInt
  transferOperator: Bytes
}

type BalanceChange @entity {
  "Currency ID:Account:Transaction hash:logIndex"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  account: Account!
  currency: Currency!

  assetCashBalanceBefore: BigInt!
  assetCashBalanceAfter: BigInt!
  assetCashValueUnderlyingBefore: BigInt!
  assetCashValueUnderlyingAfter: BigInt!

  nTokenBalanceBefore: BigInt!
  nTokenBalanceAfter: BigInt!
  nTokenValueAssetBefore: BigInt!
  nTokenValueAssetAfter: BigInt!
  nTokenValueUnderlyingBefore: BigInt!
  nTokenValueUnderlyingAfter: BigInt!

  lastClaimTimeBefore: Int!
  lastClaimTimeAfter: Int!
  lastClaimIntegralSupplyBefore: BigInt
  lastClaimIntegralSupplyAfter: BigInt
  accountIncentiveDebtBefore: BigInt
  accountIncentiveDebtAfter: BigInt
}

type AssetChange @entity {
  "Account:CurrencyId:AssetType:Maturity:Transaction hash"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  account: Account!
  currency: Currency!

  maturity: BigInt!
  settlementDate: BigInt!
  assetType: AssetType!

  notionalBefore: BigInt!
  notionalAfter: BigInt!
}

type nTokenChange @entity {
  "nTokenAddress:Transaction hash"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  nToken: nToken!
  "Account that mints or redeems nTokens, set to null on initialize markets"
  account: Account

  assetChanges: [AssetChange!]
  balanceChange: BalanceChange

  totalSupplyBefore: BigInt!
  totalSupplyAfter: BigInt!
  "Deprecated integral total supply before and after"
  integralTotalSupplyBefore: BigInt
  integralTotalSupplyAfter: BigInt
  "Last supply change time before and after, equivalent to last accumulated time"
  lastSupplyChangeTimeBefore: BigInt!
  lastSupplyChangeTimeAfter: BigInt!
  "Represents the accumulated NOTE incentives on the nToken"
  accumulatedNOTEPerNTokenBefore: BigInt
  accumulatedNOTEPerNTokenAfter: BigInt
}

type EthExchangeRateHistoricalData @entity {
  id: ID!
  timestamp: Int!
  value: BigInt!
  currency: Currency!
}

type AssetExchangeRateHistoricalData @entity {
  id: ID!
  timestamp: Int!
  value: BigInt!
  currency: Currency!
}

type NTokenPresentValueHistoricalData @entity {
  id: ID!
  timestamp: Int!
  pvAsset: BigInt!
  pvUnderlying: BigInt!
  currency: Currency!
}

type CurrencyTvl @entity {
  id: ID!
  currency: Currency!
  underlyingValue: BigInt!
  usdValue: BigInt!
}

type COMPBalance @entity {
  id: ID!
  timestamp: Int!
  value: BigInt!
  usdValue: BigInt!
}

type StakedNoteTvl @entity {
  id: ID!
  timestamp: Int!

  "Total sNOTE in the pool"
  sNOTETotalSupply: BigInt!
  "Total NOTE in the pool"
  poolNOTEBalance: BigInt!
  "Total ETH in the pool"
  poolETHBalance: BigInt!
  "Total BPT balance in the pool"
  poolBPTBalance: BigInt!

  "NOTE/ETH spot price of the pool"
  spotPrice: BigInt!
  
  "Total pool value in each relevant denomination using historical spot prices"
  totalPoolValueInNOTE: BigInt!
  totalPoolValueInETH: BigInt!
}

type TvlHistoricalData @entity {
  id: ID!
  timestamp: Int!
  usdTotal: BigInt
  perCurrencyTvl: [CurrencyTvl!]
  compBalance: COMPBalance
  sNOTETvl: StakedNoteTvl
}

type AssetTransfer @entity {
  "from:to:assetId:Transaction hash"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  fromAssetChange: AssetChange!
  toAssetChange: AssetChange!
}

enum LiquidationType {
  LocalCurrency
  LocalFcash
  CollateralCurrency
  CrossCurrencyFcash
}

type Liquidation @entity {
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  type: LiquidationType!
  account: Account!
  liquidator: Account!
  localCurrency: Currency!
  netLocalFromLiquidator: BigInt!
  collateralOrFcashCurrency: Currency
  netCollateralTransfer: BigInt
  netNTokenTransfer: BigInt
  fCashMaturities: [BigInt!]
  fCashNotionalTransfer: [BigInt!]
}

# Data accumulated and condensed into day stats for lending and borrowing
type DailyLendBorrowVolume @entity {
  id: ID!
  date: Int!
  currency: Currency!
  market: Market!
  trades: [Trade!]!
  marketIndex: Int!
  tradeType: TradeType!
  totalVolumeUnderlyingCash: BigInt!
  totalVolumeNetAssetCash: BigInt!
  totalVolumeNetfCash: BigInt!
  txCount: BigInt!
}

# One off migration for incentive calculation, snapshot values stored here
type IncentiveMigration @entity {
  "Currency ID of the migrated entity"
  id: ID!
  currency: Currency!
  "Snapshot of the incentive emission rate at migration"
  migrationEmissionRate: BigInt!
  "Snapshot of the integral total supply at migration"
  finalIntegralTotalSupply: BigInt!
  "Time when the currency was migrated"
  migrationTime: BigInt!
}

type NoteBalance @entity {
  "Account address"
  id: ID!
  "Provides a link to a NOTE holder's Notional accounts (if they exist)"
  account: Account!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  delegate: Delegate
  noteBalance: BigInt!
  noteBalanceChanges: [NoteBalanceChange!]! @derivedFrom(field: "noteBalance")
}

type NoteBalanceChange @entity {
  "Account address:TransactionHash:LogIndex"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!

  account: Account!
  noteBalance: NoteBalance!

  noteBalanceBefore: BigInt!
  noteBalanceAfter: BigInt!
  sender: Bytes!
  receiver: Bytes!
}

type StakedNoteBalance @entity {
  "Account address"
  id: ID!
  "Provides a link to a staker's Notional accounts (if they exist)"
  account: Account!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
  delegate: Delegate

  "Current sNOTE balance of the account"
  sNOTEBalance: BigInt!
  "Total amount of ETH/WETH used to join the pool"
  ethAmountJoined: BigInt!
  "Total amount of NOTE used to join the pool"
  noteAmountJoined: BigInt!

  "Total amount of ethRedeemed from the pool"
  ethAmountRedeemed: BigInt!
  "Total amount of noteRedeemed from the pool"
  noteAmountRedeemed: BigInt!

  currentCoolDown: StakedNoteCoolDown
  coolDowns: [StakedNoteCoolDown!] @derivedFrom(field: "stakedNoteBalance")
  stakedNoteChanges: [StakedNoteChange!]! @derivedFrom(field: "stakedNoteBalance")
}

type StakedNoteCoolDown @entity {
  id: ID!
  startedBlockHash: Bytes!
  startedBlockNumber: Int!
  startedTimestamp: Int!
  startedTransactionHash: Bytes!

  endedBlockHash: Bytes
  endedBlockNumber: Int
  endedTimestamp: Int
  endedTransactionHash: Bytes

  stakedNoteBalance: StakedNoteBalance!
  userEndedCoolDown: Boolean
  redeemWindowBegin: Int!
  redeemWindowEnd: Int!
}

enum sNOTEChangeType {
  Transfer,
  Stake,
  Unstake
}

type StakedNoteChange @entity {
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!

  account: Account!
  stakedNoteBalance: StakedNoteBalance!

  sNOTEChangeType: sNOTEChangeType!
  sNOTEAmountBefore: BigInt!
  sNOTEAmountAfter: BigInt!
  ethAmountChange: BigInt!
  noteAmountChange: BigInt!
  bptAmountChange: BigInt!

  sender: Bytes
  receiver: Bytes
}

type StakedNotePool @entity {
  "Staked NOTE address"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  totalBPTTokens: BigInt!
  totalSupply: BigInt!
  bptPerSNOTE: BigInt!
}

type StakedNoteInvestment @entity {
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  "The treasury manager who executed the investment"
  manager: TreasuryManager!

  bptPerSNOTEBefore: BigInt!
  bptPerSNOTEAfter: BigInt!
  totalETHInvested: BigInt!
  totalNOTEInvested: BigInt!
  totalSNOTESupply: BigInt!
}

type Treasury @entity {
  "ID hardcoded to zero"
  id: ID!
  contractAddress: Bytes!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  activeManager: TreasuryManager
  investmentCoolDownInSeconds: BigInt
  NOTEPurchaseLimit: BigInt
  tradingLimits: [TreasuryManagerTradingLimit!] @derivedFrom(field: "treasury")

  "A list of all treasury managers"
  managers: [TreasuryManager!] @derivedFrom(field: "treasury")
}

type TreasuryManager @entity {
  "ID is the manager's ethereum address"
  id: ID!
  startedBlockHash: Bytes!
  startedBlockNumber: Int!
  startedTimestamp: Int!
  startedTransactionHash: Bytes!

  endedBlockHash: Bytes!
  endedBlockNumber: Int!
  endedTimestamp: Int!
  endedTransactionHash: Bytes!

  "Set to true for the manager who is currently active"
  isActiveManager: Boolean!
  treasury: Treasury!
  sNOTEInvestments: [StakedNoteInvestment!] @derivedFrom(field: "manager")
  tokenTrades: [TreasuryTokenTrade!] @derivedFrom(field: "manager")
}

type TreasuryManagerTradingLimit @entity {
  "ID is the token address"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  treasury: Treasury!
  tokenAddress: Bytes!
  symbol: String!
  name: String!
  oracle: Bytes
  slippageLimit: BigInt
}

type TreasuryTokenTrade @entity {
  "ID is the 0x order hash"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!

  manager: TreasuryManager!
  "Taker that filled the order"
  takerAddress: Bytes!
  "Token that the treasury sold"
  makerAsset: TreasuryManagerTradingLimit!
  "Token that the taker sent back to the treasury"
  takerAsset: Bytes!
  takerAssetSymbol: String
  takerAssetName: String
  takerAssetDecimals: Int

  makerAssetFilledAmount: BigInt!
  takerAssetFilledAmount: BigInt!
  oraclePrice: BigInt
  oracleDecimals: Int
}

type StrategyVault @entity {
  "ID is the address of the vault"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!
  "Address of the strategy vault"
  vaultAddress: Bytes!
  "Name of the strategy vault"
  name: String
  "Primary currency the vault borrows in"
  primaryBorrowCurrency: Currency!
  "Minimum amount of primary currency that must be borrowed"
  minAccountBorrowSize: BigInt!
  "Minimum collateral ratio before liquidation"
  minCollateralRatioBasisPoints: Int!
  "Maximum collateral ratio that liquidation can reach"
  maxDeleverageCollateralRatioBasisPoints: Int!
  "Fee assessed on primary borrow paid to the nToken and protocol"
  feeRateBasisPoints: Int!
  "Share of fee paid to protocol reserve"
  reserveFeeSharePercent: Int!
  "Discount rate given to liquidators"
  liquidationRatePercent: Int!
  "Maximum market index for borrowing terms"
  maxBorrowMarketIndex: Int!
  "Secondary borrow currencies (if any)"
  secondaryBorrowCurrencies: [Currency!]
  "Can the vault be entered"
  enabled: Boolean!
  "Allows positions to be rolled forward"
  allowRollPosition: Boolean!
  "Only the vault can enter"
  onlyVaultEntry: Boolean!
  "Only the vault can exit"
  onlyVaultExit: Boolean!
  "Only the vault can roll"
  onlyVaultRoll: Boolean!
  "Only the vault can liquidate"
  onlyVaultDeleverage: Boolean!
  "Only the vault can settle"
  onlyVaultSettle: Boolean!
  "Vault is allowed to re-enter Notional"
  allowsReentrancy: Boolean!

  "All maturities of this strategy vault"
  maturities: [StrategyVaultMaturity!] @derivedFrom(field: "strategyVault")
  vaultCapacity: StrategyVaultCapacity! @derivedFrom(field: "strategyVault")
}

type StrategyVaultCapacity @entity {
  "ID is the address of the vault"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  strategyVault: StrategyVault!

  maxPrimaryBorrowCapacity: BigInt!
  totalUsedPrimaryBorrowCapacity: BigInt!

  maxSecondaryBorrowCapacity: [BigInt!]
  totalUsedSecondaryBorrowCapacity: [BigInt!]
}

type StrategyVaultAccount @entity {
  "ID is the address of the vault:address of account"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  account: Account!
  strategyVault: StrategyVault!
  strategyVaultMaturity: StrategyVaultMaturity!

  "Vault shares held in this maturity by the account"
  vaultShares: BigInt!
  "Amount of fCash borrowed"
  primaryBorrowfCash: BigInt!

  "Debt shares of the secondary borrow currencies"
  secondaryBorrowDebtShares: [BigInt!]
  trades: [StrategyVaultTrade!] @derivedFrom(field: "strategyVaultAccount")
}

type StrategyVaultMaturity @entity {
  "ID is the address of the vault:maturity"
  id: ID!
  lastUpdateBlockHash: Bytes!
  lastUpdateBlockNumber: Int!
  lastUpdateTimestamp: Int!
  lastUpdateTransactionHash: Bytes!

  strategyVault: StrategyVault!

  "Maturity of the given vault"
  maturity: Int!

  "Total fCash borrowed in the primary currency"
  totalPrimaryfCashBorrowed: BigInt!
  "Total asset cash held in the vault"
  totalAssetCash: BigInt!
  "Total vault shares in the vault"
  totalVaultShares: BigInt!
  "Total strategy tokens in the vault"
  totalStrategyTokens: BigInt!
  "Total secondary fCash borrowed for secondary borrow currencies"
  totalSecondaryfCashBorrowed: [BigInt!]
  "Total secondary debt shares for secondary borrow currencies"
  totalSecondaryDebtShares: [BigInt!]
  "Total fees accrued to the reserve in this maturity"
  totalReserveFeesAccrued: BigInt!
  "Total fees accrued to the nToken in this maturity"
  totalNTokenFeesAccrued: BigInt!

  "True if vault is settled"
  isSettled: Boolean!
  "Timestamp when the vault was settled"
  settlementTimestamp: Int
  "If vault has settled, holds the value of the strategy token"
  settlementStrategyTokenValue: BigInt
  "Holds the settlement rate of the primary borrow currency"
  settlementRate: SettlementRate
  "Any shortfall to this vault maturity (if any)"
  shortfall: BigInt
  "Any insolvency to this vault maturity (if any)"
  insolvency: BigInt


  "All strategy vault accounts in this maturity"
  accounts: [StrategyVaultAccount!] @derivedFrom(field: "strategyVaultMaturity")
  historicalValue: [StrategyVaultHistoricalValue!] @derivedFrom(field: "strategyVaultMaturity")
  trades: [StrategyVaultTrade!] @derivedFrom(field: "strategyVaultMaturity")
}

enum VaultTradeType {
  EnterPosition,
  RollPosition,
  ExitPreMaturity,
  ExitPostMaturity,
  DeleverageAccount,
  VaultRedeemStrategyToken,
  VaultMintStrategyToken
}

type StrategyVaultTrade @entity {
  "strategyVault:account or vault address:transaction hash:log index"
  id: ID!
  blockHash: Bytes!
  blockNumber: Int!
  timestamp: Int!
  transactionHash: Bytes!
  transactionOrigin: Bytes!

  vaultTradeType: VaultTradeType!
  isVaultAction: Boolean!

  strategyVaultMaturity: StrategyVaultMaturity!
  "Will be empty if action is a vault level action"
  strategyVaultAccount: StrategyVaultAccount

  "Net change to fCash borrowed in the primary currencies"
  primaryfCashBefore: BigInt!
  primaryfCashAfter: BigInt!
  netPrimaryfCashChange: BigInt!

  "Net change to vault shares"
  vaultSharesBefore: BigInt!
  vaultSharesAfter: BigInt!
  netVaultShareChange: BigInt!

  "Net change to strategy tokens"
  strategyTokensBefore: BigInt!
  strategyTokensAfter: BigInt!
  netStrategyTokenChange: BigInt!

  "Net change to asset cash"
  assetCashBefore: BigInt!
  assetCashAfter: BigInt!
  netAssetCashChange: BigInt!

  "Net change to fCash borrowed in the secondary currencies"
  secondaryfCashBefore: [BigInt!]
  secondaryfCashAfter: [BigInt!]
  netSecondaryfCashChange: [BigInt!]

  "True if the liquidator transferred shares during liquidation"
  didTransferInLiquidation: Boolean
}

type StrategyVaultHistoricalValue @entity {
  "strategyVault:maturity:timestamp"
  id: ID!
  timestamp: Int!

  strategyVaultMaturity: StrategyVaultMaturity!
  "Value of a single strategy token at the given timestamp"
  underlyingValueOfStrategyToken: BigInt!
  
  "Exchange rate for the primary borrow currency at this timestamp"
  ethExchangeRate: EthExchangeRateHistoricalData!
  "Asset rate for the primary borrow currency at this timestamp"
  assetExchangeRate: AssetExchangeRateHistoricalData!
}